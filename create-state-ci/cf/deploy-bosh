#!/bin/bash

set -e

create_loop_devices() {
  echo "creating loop devices..."
  for i in {0..255}
  do
    mknod -m 0660 /dev/loop${i} b 7 $i || true
  done
}

permit_device_control() {
  local devices_mount_info=$(cat /proc/self/cgroup | grep devices)

  if [ -z "$devices_mount_info" ]; then
    # cgroups not set up; must not be in a container
    return
  fi

  local devices_subsytems=$(echo $devices_mount_info | cut -d: -f2)
  local devices_subdir=$(echo $devices_mount_info | cut -d: -f3)

  if [ "$devices_subdir" = "/" ]; then
    # we're in the root devices cgroup; must not be in a container
    return
  fi

  if [ ! -e /tmp/devices-cgroup ]; then
    # mount our container's devices subsystem somewhere
    mkdir /tmp/devices-cgroup
    mount -t cgroup -o $devices_subsytems none /tmp/devices-cgroup
  fi

  # permit our cgroup to do everything with all devices
  echo -n a > /tmp/devices-cgroup${devices_subdir}/devices.allow || true

  umount /tmp/devices-cgroup || true
}

export DIRECTOR_DIR=/var/vcap/director
export LOG_DIR=/var/vcap/logs
mkdir -p "${DIRECTOR_DIR}"
mkdir -p "${LOG_DIR}"

exec 1> >(tee -i "${LOG_DIR}/deploy-bosh.log")
exec 2>&1

permit_device_control
create_loop_devices

export BOSH_DIRECTOR_IP="10.245.0.2"

cp /var/vcap/cache/director.yml "${DIRECTOR_DIR}"

bosh --tty create-env \
  "${DIRECTOR_DIR}/director.yml" \
  --vars-store="${DIRECTOR_DIR}/creds.yml" \
  --state="${DIRECTOR_DIR}/state.json" \

bosh int "${DIRECTOR_DIR}/creds.yml" \
  --path /director_ssl/ca > "${DIRECTOR_DIR}/ca.crt"

bosh int "${DIRECTOR_DIR}/creds.yml" \
  --path /jumpbox_ssh/private_key > "${DIRECTOR_DIR}/jumpbox.key"

cat <<EOF > "${DIRECTOR_DIR}/env"
export BOSH_ENVIRONMENT="${BOSH_DIRECTOR_IP}"
export BOSH_CLIENT=admin
export BOSH_CLIENT_SECRET=$(bosh int "${DIRECTOR_DIR}/creds.yml" --path /admin_password)
export BOSH_CA_CERT="$(cat ${DIRECTOR_DIR}/ca.crt)"
EOF

# Remove BOSH CLI cached files
rm -rf $HOME/.bosh

# Setting up the ip table route would be done here if the container shared
# the same network namespace as the host vm - which it does not.
#
# ip route add 10.144.0.0/16 via "${BOSH_DIRECTOR_IP}"
#
# Hence this is done by a linuxkit pkg named bosh-lite-routing
#
# We trigger running ip route command by creating a file.
touch "${DIRECTOR_DIR}/trigger-route-setup"
#
# We previously polled the BOSH Director IP using curl/wget. This had the
# problem of creating an unbounded number of TCP connections in the VM due to
# bad routing.
#
# This happened because the Director's subnet was not associated with a network
# device causing traffic to be routed outside the vm. Once outside due to
# the Director IP alias on the loopback device and since vpnkit was listening on
# the IP/port, traffic would flow back to the VM. Finally, the
# vpnkit-forwarder in the VM would make the same original request to the BOSH
# Director IP continuing the loop
